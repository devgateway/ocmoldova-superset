#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
x-superset-image: &superset-image ocmoldova/superset:${TAG:-latest-dev}
x-superset-user: &superset-user root
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./superset:/app/superset
  - ./superset-frontend:/app/superset-frontend
  - superset_home:/app/superset_home
  - ./tests:/app/tests

version: "3.7"
services:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    profiles:
      - superset
    volumes:
      - redis:/data

  db:
    env_file: docker/.env
    image: postgres:14
    container_name: superset_db
    restart: unless-stopped
    profiles:
      - superset
      - scraper
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - db_home:/var/lib/postgresql/data

  ocdsdata:
    env_file: docker/.env_ocdsdata
    image: ocdsdata:${TAG:-latest-dev}
    container_name: ocdsdata
    restart: no
    depends_on:
      - db
    build:
      context: ocdsdata
    working_dir: /app
    profiles:
      - scraper      
    command: ["python", "import-moldova.py"]
    #command: tail -F anything

  superset:
    env_file: docker/.env
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    profiles:
      - superset
    cap_add:
     - SYS_PTRACE
    ports:
      - 8088:8088
      - 5678:5678
    user: *superset-user
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG}"
    build:
      target: dev     

  # superset-websocket:
  #   container_name: superset_websocket
  #   build: ./superset-websocket
  #   image: superset-websocket
  #   profiles:
  #     - superset
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - redis
    # Mount everything in superset-websocket into container and
    # then exclude node_modules and dist with bogus volume mount.
    # This is necessary because host and container need to have
    # their own, separate versions of these files. .dockerignore
    # does not seem to work when starting the service through
    # docker-compose.
    #
    # For example, node_modules may contain libs with native bindings.
    # Those bindings need to be compiled for each OS and the container
    # OS is not necessarily the same as host OS.
    # volumes:
    #   - ./superset-websocket:/home/superset-websocket
    #   - /home/superset-websocket/node_modules
    #   - /home/superset-websocket/dist
    # environment:
    #   - PORT=8080
    #   - REDIS_HOST=redis
    #   - REDIS_PORT=6379
    #   - REDIS_SSL=false

  # superset-init:
  #   image: *superset-image
  #   container_name: superset_init
  #   command: ["/app/docker/docker-init.sh"]
  #   env_file: docker/.env
  #   depends_on: *superset-depends-on
  #   user: *superset-user
  #   volumes: *superset-volumes
  #   environment:
  #     CYPRESS_CONFIG: "${CYPRESS_CONFIG}"
  #   healthcheck:
  #     disable: true
  #   profiles:
  #     - superset  

  superset-node:
    image: node:16
    container_name: superset_node
    command: ["/app/docker/docker-frontend.sh"]
    env_file: docker/.env
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    ipc: host # Required for cypress to work
    profiles:
      - superset  

  superset-embed:
    image: superset-embed:${TAG:-latest-dev}
    container_name: superset_embed
    profiles:
      - superset-embed     
    build:
      target: dev 
      context: superset-embed
    working_dir: /app
    environment:
      - REACT_APP_SUPERSET_URL=${SUPERSET_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./superset-embed:/app
    command: ["npm", "start"]             

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: *superset-user
    volumes: *superset-volumes
    healthcheck:
      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]
    # Bump memory limit if processing selenium / thumbnails on superset-worker
    # mem_limit: 2038m
    # mem_reservation: 128M
    profiles:
      - superset 

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: docker/.env
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: *superset-user
    volumes: *superset-volumes
    healthcheck:
      disable: true
    profiles:
      - superset       

  superset-tests-worker:
    image: *superset-image
    container_name: superset_tests_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: docker/.env
    environment:
      DATABASE_HOST: localhost
      DATABASE_DB: test
      REDIS_CELERY_DB: 2
      REDIS_RESULTS_DB: 3
      REDIS_HOST: localhost
    network_mode: host
    depends_on: *superset-depends-on
    user: *superset-user
    volumes: *superset-volumes
    profiles:
      - superset     
    healthcheck:
      test: ["CMD-SHELL", "celery inspect ping -A superset.tasks.celery_app:app -d celery@$$HOSTNAME"]

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
